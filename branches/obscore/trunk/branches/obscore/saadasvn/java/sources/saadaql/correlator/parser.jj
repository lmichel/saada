/**
 * JavaCC file
 */
 
options {
  JDK_VERSION = "1.5";
  IGNORE_CASE=false ;
}
PARSER_BEGIN(Parser) // populate relationship query
package relationship;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

public class Parser {
	private static final String   UNIT       = "[+\\-/\\.\\[\\]\\w]+";
	private static final String   K_VALUE    = "[+\\-]?[1-9]\\d*";
	private static final String   DIST_VALUE = "\\+?(?:\\d*\\.)?\\d+(?:[Ee][+\\-]?\\d*)?";
	
	public static final class PrincipalNode {
		private final String relation_name;
		private final From primary;
		private final From secondary;
		private final List<Condition> condList = new ArrayList<Condition>();
		private final List<ConditionUCD> condListUCD = new ArrayList<ConditionUCD>();
		private final List<Qualif> qualList = new ArrayList<Qualif>();
		private ConditionDist condDist;
		private ConditionKnn condKnn;
		private PrincipalNode(String relation,From prim, From sec){
			this.relation_name = relation;
			this.primary = prim;
			this.secondary = sec;
		}
		private final void addCondition(Condition cond){this.condList.add(cond);}
		private final void addConditionUCD(ConditionUCD cond){this.condListUCD.add(cond);}
		private final void addQualif(Qualif qualif){this.qualList.add(qualif);}
		private final void setConditionDist(ConditionDist cd){this.condDist=cd;}
		private final void setConditionKnn(ConditionKnn cknn){this.condKnn=cknn;}
		
		
		public final String getRelationName(){ return this.relation_name; }
		public final From getPrimary()  { return this.primary;  }
		public final From getSecondary(){ return this.secondary;}
		public final List<Condition>    getCondList(){ return this.condList; }
		public final List<ConditionUCD> getCondListUCD(){ return this.condListUCD; }
		public final List<Qualif>       getQualList(){ return this.qualList; }
		public final ConditionDist getCondDist(){ return this.condDist; }
		public final ConditionKnn getCondKnn(){ return this.condKnn; }
	}
	
	public static final class From {
		private final String[] listClass;
		private String was;
		private String wac;
		private String wucd;
		private From(String[] lclass){
			this.listClass = lclass;
		}
		public final String[] getListClass(){ return this.listClass; }
		public final boolean hasWAS(){ return this.was!=null; }
		public final boolean hasWAC(){ return this.wac!=null; }
		public final boolean hasWUCD(){ return this.wucd!=null; }
		public final String getWAS(){ return this.was; }
		public final String getWAC(){ return this.wac; }
		public final String getWUCD(){ return this.wucd; }
	}
	
	public static final class Condition{
		private final String str;
		private Condition(String value){this.str = value;}
		public final String getStr(){ return this.str; }
	}
	public static final class ConditionUCD{
		private final String str;
		private ConditionUCD(String value){this.str = value;}
		public final String getStr(){ return this.str; }
	}
	
	//private interface ConditionWithUnit{
	//	private void setUnit(String unit);
	//}
	
	public static final class ConditionDist { // implements ConditionWithUnit {
		private final String in;
		private double dist;
		private String unit = "none";
		private ConditionDist(String str){ this.in = str; parse(); }
		private final void parse(){
			Pattern p = Pattern.compile("^\\{\\s*("+DIST_VALUE+")\\s*(?:\\[("+UNIT+")\\])?\\s*\\}$");
			Matcher m = p.matcher(this.in);
			if(m.find()){
				this.dist = Double.parseDouble(m.group(1));
				if(m.group(2)!=null && !m.group(2).equals("")){ this.unit = m.group(2); }
			}else{
				throw new IllegalArgumentException("ConditionDist \""+this.in+"\" doesn't respect the syntax \"{ distance ( [unit] ) }\" !");
			}
		}
		//private ConditionDist(double dist){ this.dist = dist; }
		//private final void setUnit(String unti){ this.unit=unit; }
		public final double getDist(){ return this.dist; }
		public final String getUnit(){ return this.unit; }
	}
	
	public static final class ConditionKnn {// implements ConditionWithUnit {
		private final String in;
		private int k;
		private double dist = Double.MAX_VALUE;
		private String unit = "none";
		private ConditionKnn(String str){ this.in = str; parse(); }
		private final void parse(){
			Pattern p = Pattern.compile("^\\{\\s*("+K_VALUE+")\\s*(?:,\\s*("+DIST_VALUE+")\\s*(?:\\[("+UNIT+")\\])?)?\\s*\\}$");
			Matcher m = p.matcher(this.in);
			if(m.find()){
				this.k = Integer.parseInt(m.group(1));
				if(m.group(2)!=null && !m.group(2).equals("")){ this.dist = Double.parseDouble(m.group(2)); }
				if(m.group(3)!=null && !m.group(3).equals("")){ this.unit = m.group(3); }
			}else{
				throw new IllegalArgumentException("ConditionKnn \""+this.in+"\" doesn't respect the syntax \"{ integer (, distance ( [unit] ) ) }\" !");
			}
		}
		//private ConditionKnn(int k){this.k = k;}
		//private final void setDist(double dist){ this.dist = dist; }
		//private final void setUnit(String unti){ this.unit = unit; }
		public final int getK(){ return this.k; }
		public final double getDist(){ return this.dist; }
		public final String getUnit(){ return this.unit; }
	}
	
	public static final class Qualif{
		private final String name;
		private final String str;
		private Qualif(String name,String value){
			this.name = name;
			this.str = value;
		}
		public final String getName(){ return this.name;}
		public final String getStr() { return this.str; }
	}
	
	
	
  public static void main(String args[]) throws ParseException {
    String query =  "PopulateRelation myr\n"+
                     "PrimaryFrom fdqsf \n"+
                     "  WhereUCD{ [ucd] > 5 [unit] } \n"+
                     "  WhereAttributeClass{ c.ra > 4 } \n"+
                     "  WhereAttributeSaada{ gsd.ss > 4 } \n"+
                     "SecondaryFrom sec1,sec2 \n"+
                     "  WhereAttributeSaada{ c.ra > 4 } \n"+
                     "q_name.Set { letruc > 0 }\n"+
                     "other_q.Set { substring(toto,3) ~ 'ouioui' }\n"+
                     "Condition{ ra<5 and dec>10 }\n";
    new Parser(new java.io.BufferedReader(new java.io.StringReader( query ) ));
    try {
    	PrincipalNode pnode = Parser.parse();
    	System.out.println("Parse Successfull") ;
    	System.out.println("RelationName: "+pnode.relation_name) ;
    	System.out.println("Prim: "+Arrays.toString(pnode.primary.listClass)) ;
    	if(pnode.primary.was!=null) System.out.println(" - was: "+pnode.primary.was) ;
    	if(pnode.primary.wac!=null) System.out.println(" - wac: "+pnode.primary.wac) ;
    	if(pnode.primary.wucd!=null) System.out.println(" - wucd: "+pnode.primary.wucd) ;
    	System.out.println("Sec: "+Arrays.toString(pnode.secondary.listClass)) ;
    	if(pnode.secondary.was!=null) System.out.println(" - was: "+pnode.secondary.was) ;
    	if(pnode.secondary.wac!=null) System.out.println(" - wac: "+pnode.secondary.wac) ;
    	if(pnode.secondary.wucd!=null) System.out.println(" - wucd: "+pnode.secondary.wucd) ;
    	if(pnode.condList.size()>0){
    		for(Condition cond : pnode.condList) System.out.println("Condition: "+cond.str);
    	}
    	if(pnode.qualList.size()>0){
    		for(Qualif qual : pnode.qualList) System.out.println("Qualif: "+qual.name+ " SQL: "+qual.str);
    	}
	} catch (Exception e) {
        System.out.println("Exception: "+e.getMessage());
	} catch (Error e) {
        System.out.println("Error: "+e.getMessage());
    }
  }
}
PARSER_END(Parser)

SKIP : { " "|"\r"|"\t"|"\n"|"\r\n" }
TOKEN : /* Key Words (K=Key, D=Delimiter) */
{
	< K_POPR:  "PopulateRelation" >
|	< K_PFROM: "PrimaryFrom"      >
|	< K_SFROM: "SecondaryFrom"    >
|	< K_COND:  "Condition"        >
|	< K_CUCD:  "ConditionUCD"     >
|	< K_CDIST: "ConditionDist"    >
|	< K_CKNN:  "ConditionKnn"     >
|	< K_SQUAL: ".Set"             >
|	< K_WAS:   "WhereAttributeSaada" >
|	< K_WAC:   "WhereAttributeClass" >
|	< K_WUCD:  "WhereUCD"            >
|	< D_OPEN: "{" >
|	< D_CLOSE: "}" >
|	< D_UNIT_L: "[" >
|	< D_UNIT_R: "]" >
|	< NAME: (<LETTER>|"_")(<WORD_CHARS>)* >
|	< LIST_CLASS: "*" | (<NAME>)(","<NAME>)* >
| 	< #LETTER: ["a"-"z","A"-"Z"] >
|   < #DIGIT: ["0" - "9"] >
|	< #WORD_CHARS: ["a"-"z","A"-"Z","_","0"-"9"] >
|	< COMMA: "," >
|	< BETWEEN_D: <D_OPEN>(<ALMOST_ALL>)+<D_CLOSE> >
|	< #ALMOST_ALL: ~["{","}"] >
//|   < UNITS: "rad" | "mas" | "arcsec" | "arcmin" | "degree" >
//|   < INTEGER: ( <DIGIT> )+ >
//|   < #FLOAT: <INTEGER> | <INTEGER> ( "." <INTEGER> )? | "." <INTEGER> >
//|   < S_NUMBER: <FLOAT> | <FLOAT> ( ["e","E"] ([ "-","+"])? <FLOAT> )? >
//|	  < SQL: "'" (~["'"])* "'" ("'" (~["'"])* "'")*>
}


PrincipalNode parse() :{
}{
	{ PrincipalNode pn = new PrincipalNode(relationName(),pfrom(),sfrom()); }
	condQual(pn)
	<EOF>
    { return pn; }
}
String relationName() :{
	Token t;
}{
	<K_POPR>
	t=<NAME> { return t.image ; }
}
>From pfrom() : {
	Token t;
}{
	<K_PFROM>
	( t=<NAME>       { From f1 = new From(new String[]{t.image}) ; withAttrClass(f1)    ; return f1;}
	| t=<LIST_CLASS> { From f2 = new From(  t.image.split(",") ) ; wihtoutAttrClass(f2) ; return f2;})  
}
>From sfrom() : {
	Token t;
}{
	<K_SFROM>
	( t=<NAME>       { From f1 = new From(new String[]{t.image}) ; withAttrClass(f1)    ; return f1;}
	| t=<LIST_CLASS> { From f2 = new From(  t.image.split(",") ) ; wihtoutAttrClass(f2) ; return f2;})  
}

void withAttrClass(From lcw):{
}{
	(
		(parseWUCD(lcw) ( ( parseWAS(lcw)  ( parseWAC(lcw) | {} ) ) | ( parseWAC(lcw) ( parseWAS(lcw)  | {} ) )  | {} )) |
		(parseWAS(lcw)  ( ( parseWUCD(lcw) ( parseWAC(lcw) | {} ) ) | ( parseWAC(lcw) ( parseWUCD(lcw) | {} ) )  | {} )) |
		(parseWAC(lcw)  ( ( parseWUCD(lcw) ( parseWAS(lcw) | {} ) ) | ( parseWAS(lcw) ( parseWUCD(lcw) | {} ) )  | {} )) |
		{}
	)	
}
void wihtoutAttrClass(From lcw):{
}{
	(
		(parseWUCD(lcw) ( parseWAS(lcw)  | {} )) |
		(parseWAS(lcw)  ( parseWUCD(lcw) | {} )) |
		{}
	)	
}

void parseWUCD(From lcw):{
Token t;
}{
	<K_WUCD>
	t=<BETWEEN_D> { lcw.wucd = t.image.replace("{","").replace("}","") ; }
}
void parseWAS(From lcw):{
	Token t;
}{
	<K_WAS>
	t=<BETWEEN_D> { lcw.was = t.image.replace("{","").replace("}","") ; }
}
void parseWAC(From lcw):{
	Token t;
}{
	<K_WAC>
	t=<BETWEEN_D> { lcw.wac = t.image.replace("{","").replace("}","") ; }
}

void condQual(PrincipalNode pn):{
	Token t;
}{
	( t=<K_COND> { parseCond(pn); } | t=<K_CUCD> { parseCondUCD(pn); } | t=<NAME> { parseQual(pn,t.image); } )*
	( t=<K_CKNN>  { parseCondKnn(pn); condQual2(pn); } | t=<K_CDIST> { parseCondDist(pn); condQual2(pn); } | {} )
	//( t=<K_COND> { parseCond(pn); } | t=<K_CUCD> { parseCondUCD(pn); } | t=<NAME> { parseQual(pn,t.image); } )*
}
void condQual2(PrincipalNode pn):{
	Token t;
}{
	( t=<K_COND> { parseCond(pn); } | t=<K_CUCD> { parseCondUCD(pn); } | t=<NAME> { parseQual(pn,t.image); } )*
}
void parseCond(PrincipalNode pn):{
	Token t_sql;
}{
	t_sql=<BETWEEN_D> { pn.addCondition(new Condition(t_sql.image.replace("{","").replace("}",""))); }
}
void parseCondUCD(PrincipalNode pn):{
	Token t_sql;
}{
	t_sql=<BETWEEN_D> { pn.addConditionUCD(new ConditionUCD(t_sql.image.replace("{","").replace("}",""))); }
}
void parseCondDist(PrincipalNode pn):{
	Token t_in;
}{
	t_in=<BETWEEN_D> { pn.setConditionDist(new ConditionDist(t_in.image)); }
}
void parseCondKnn(PrincipalNode pn):{
	Token t_in;
}{
	t_in=<BETWEEN_D> { pn.setConditionKnn(new ConditionKnn(t_in.image)); }
}

//void parseUnit(ConditionWithUnit cwu):{
//	Token t_unit;
//}{
//	<D_UNIT_L>
//	t_unit=<UNITS> { cwu.setUnit(t_unit); }
//	<D_UNIT_R>
//}

void parseQual(PrincipalNode pn,String qname):{
	Token t_sql;
}{
	<K_SQUAL>
	t_sql=<BETWEEN_D> { pn.addQualif(new Qualif(qname,t_sql.image.replace("{","").replace("}",""))); }
}
